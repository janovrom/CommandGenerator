<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Design" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="Microsoft.VisualStudio.Editor" #>
<#@ import namespace="Microsoft.VisualStudio.Editor" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="VSLangProj" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Resources.Tools" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="../CommandSchema.ttinclude" #>
<#@ include file="../CommandReader.ttinclude" #>
<#@ include file="../MultipleOutputHelper.ttinclude" #>
<#@ output extension=".txt" #><#
var serviceProvider = this.Host as IServiceProvider;
var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
string projectDir = Host.ResolveAssemblyReference("$(ProjectDir)");
XmlDocument doc = new XmlDocument();
// Load prototype.xml
doc.Load(Path.Combine(projectDir, @"./Commands.xml"));

List<CustomCommand> cmds = Read(doc);

var manager = new Manager(Host);
var t4DirInfo = new FileInfo(Host.TemplateFile).Directory;
  
Generate(cmds, manager, t4DirInfo);
manager.Process();
#><#+
private string FirstLower(string s)
{
    char[] ch = s.ToCharArray();
    ch[0] = char.ToLower(ch[0]);
    return new string(ch);
}

private void WriteLoader(Manager manager, string loaderNamespace, List<CustomCommand> cmds, HashSet<string> namespaces, HashSet<string> propertyTypes) 
{
    manager.Start("Scene3DLoader.cs");
    foreach (string nspace in namespaces)
    {
        manager.Write("using ");
        manager.Write(loaderNamespace + nspace);
        manager.WriteLine(";");
    }
    manager.WriteLine("using System.Collections.Generic;");
    manager.WriteLine("using System.Linq;");
    manager.WriteLine("using NHibernate.Mapping.ByCode.Conformist;");
    manager.WriteLine();

    manager.Write("namespace ");
    manager.WriteLine(loaderNamespace);
    manager.WriteLine("{"); // Namespace
    manager.PushIndent();

    manager.WriteLine("public partial class Scene3DLoader");
    manager.WriteLine("{"); // Class
    manager.WriteLine();
    manager.PushIndent();

    manager.WriteLine();

    // Declare Dictionaries
    foreach (string propType in propertyTypes)
    {
        string fl = FirstLower(propType);
        manager.WriteLine("private Dictionary<int, ", propType, "> _", fl, ";");
    }

    manager.WriteLine();

    manager.WriteLine("partial void InitializeCommands()"); // Start method
    manager.WriteLine("{");
    manager.PushIndent();

    manager.WriteLine("// Initialize structures");
    // Load commands
    foreach (CustomCommand cmd in cmds) 
    {
        manager.Write("var cmd");
        manager.Write(cmd.name);
        manager.Write(" = _session.QueryOver<");
        manager.Write(cmd.name);
        manager.WriteLine(">().Where(x => x.Entity.Id == scene.Id).List();");
    }

    manager.WriteLine();

    // Load used entities
    foreach (string propType in propertyTypes)
    {
        string fl = FirstLower(propType);
        manager.Write("_");
        manager.Write(fl);
        manager.Write(" = _session.QueryOver<");
        manager.Write(propType);
        manager.Write(">().Where(x => x.Entity.Id == scene.Id).List().ToDictionary<");
        manager.Write(propType);
        manager.WriteLine(", int>(entity => entity.Id);");
    }

    manager.WriteLine();
    manager.WriteLine("// Unproxy commands and set the global dictionary");
    foreach (CustomCommand cmd in cmds) 
    {
        manager.Write("foreach (");
        manager.Write(cmd.name);
        manager.Write(" cmd in cmd");
        manager.Write(cmd.name);
        manager.WriteLine(")"); 
        manager.WriteLine("{"); 
        manager.PushIndent(); // Foreach block
        manager.WriteLine("_commands[cmd.Id] = cmd;");
        

        foreach (CustomProperty prop in cmd.properties)
        {
            if (propertyTypes.Contains(prop.type))
            {
                manager.Write("cmd.");
                manager.Write(prop.name);
                manager.Write(" = _");
                manager.Write(FirstLower(prop.type));
                manager.Write("[cmd.");
                manager.Write(prop.name);
                manager.WriteLine(".Id];");
            }
        }

        manager.RemoveIndent();
        manager.WriteLine("}"); // End foreach
        manager.WriteLine();
    }

    manager.RemoveIndent();
    manager.WriteLine("}"); // End method

    manager.WriteLine();
    manager.RemoveIndent();
    manager.WriteLine("}"); // End class

    manager.RemoveIndent();
    manager.WriteLine("}"); // End namespace
}

private void WriteMapping(CustomCommand cmd, Manager manager, ProjectItem projectItem, HashSet<string> namespaces, HashSet<string> propertyTypes)
{
    if (!namespaces.Contains(cmd.cmdNamespace)) namespaces.Add(cmd.cmdNamespace);
    
    var mappingName = cmd.name + "Mapping";
    var mappingFileName = mappingName +".cs";
    manager.Start(mappingFileName);

    manager.WriteLine("using NHibernate.Mapping.ByCode.Conformist;");
    manager.WriteLine("");

    manager.WriteLine("");
    manager.WriteLine("namespace " + (projectItem.ContainingProject.Name + cmd.cmdNamespace) + ".Mappings");
    manager.WriteLine("{");
    
    // Class in the namespace
    manager.PushIndent();

    manager.WriteLine();
    manager.Write("public partial class ");
    manager.Write(mappingName);
    manager.Write(" : SubclassMapping<");
    manager.Write(cmd.name);
    manager.WriteLine(">");

    manager.WriteLine("{");
    manager.WriteLine();

    manager.PushIndent();

    manager.Write("public ");
    manager.Write(mappingName);
    manager.WriteLine("()");
    manager.WriteLine("{");

    manager.PushIndent();

    manager.Write("DiscriminatorValue(\"");
    manager.Write(cmd.name);
    manager.WriteLine("\");");
    manager.WriteLine();

    foreach (CustomProperty prop in cmd.properties)
    {
        if (prop.mapping == null) continue;

        manager.Write(prop.mapping);
        manager.Write("(x => x."); 
        manager.Write(prop.name);
        manager.WriteLine(", map =>");
        manager.WriteLine("{");
        manager.PushIndent();

        if (prop.mapping != "Property")
        {
            manager.Write("map.NotNullable(");
            manager.Write(prop.canBeNull.ToString().ToLowerInvariant());
            manager.WriteLine(");");

            if (!propertyTypes.Contains(prop.type)) propertyTypes.Add(prop.type);
        }

        manager.WriteLine("map.Column(\"" + prop.name + "\");");

        manager.RemoveIndent();

        manager.WriteLine("});");
        manager.WriteLine();
    }

    manager.WriteLine();
    manager.WriteLine("InitializeOther();");

    manager.RemoveIndent();

    manager.WriteLine("}"); // end constructor

    manager.WriteLine();
    manager.WriteLine("partial void InitializeOther();");

    manager.RemoveIndent();

    manager.WriteLine();
    manager.WriteLine("}"); // end class

    // End of the class
    manager.RemoveIndent();

    manager.WriteLine("}"); // End namespace
}

private void WriteCommand(CustomCommand cmd, Manager manager, ProjectItem projectItem)
{
    manager.Start(cmd.name + ".cs");

	manager.Write("using ");
    manager.Write(projectItem.ContainingProject.Name + cmd.parentNamespace);
    manager.WriteLine(";");

    manager.Write("using ");
    manager.Write(projectItem.ContainingProject.Name); // For resources
    manager.WriteLine(";");

    manager.WriteLine("");
    manager.WriteLine("namespace " + (projectItem.ContainingProject.Name + cmd.cmdNamespace));
    manager.WriteLine("{");
    manager.WriteLine("");
    manager.Write("\tpublic partial class ");
    manager.Write(cmd.name);
    manager.Write(" : ");
    manager.WriteLine(cmd.parentName);

    manager.Write("\t{");
    manager.WriteLine("");
    string displayName = cmd.name + "Name";
    manager.WriteLine("\t\tpublic override string DisplayName => " + projectItem.ContainingProject.Name + ".CommandResources." + displayName + ";");
    manager.WriteLine("\t\tpublic override bool IsPersistable => " + cmd.isPersistable.ToString().ToLowerInvariant() + ";");
                
    foreach (CustomProperty prop in cmd.properties)
    {
        manager.Write("\t\tpublic virtual ");
        manager.Write(prop.type);
        manager.Write(" ");
        manager.Write(prop.name);
        manager.Write(" { get; set; }");
        if (prop.mapping == null)
            Write("Property " + prop.name + " of class " + cmd.name + " is not mapped to db.");

        manager.WriteLine("// Mapping " + (prop.mapping == null ? "Not mapped to db" : prop.mapping));
    }

    manager.WriteLine("");
    manager.WriteLine("");

    // Default protected constructor
    manager.Write("\t\tprotected ");
    manager.Write(cmd.name);
    manager.WriteLine("() {}");

    // Public constructor
    manager.Write("\t\tpublic ");
    manager.Write(cmd.name);
    manager.WriteLine("(string test) {}");

    manager.WriteLine("\t}");
    manager.WriteLine("");
    manager.Write("}");
}

private void Generate(List<CustomCommand> cmds, Manager manager, DirectoryInfo t4DirInfo) 
{
    var hostServiceProvider = (IServiceProvider) Host;
    var dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    string resxFileName = Path.Combine(t4DirInfo.FullName, "CommandResources.resx");
    using (ResXResourceWriter resx = new ResXResourceWriter(resxFileName)) 
    {
        HashSet<string> namespaces = new HashSet<string>();
        HashSet<string> propertyTypes = new HashSet<string>();

	    foreach (CustomCommand cmd in cmds) 
	    {
		    WriteCommand(cmd, manager, projectItem);
            WriteMapping(cmd, manager, projectItem, namespaces, propertyTypes);
            string displayName = cmd.name + "Name";
            resx.AddResource(displayName, cmd.displayName);
        }

        WriteLoader(manager, projectItem.ContainingProject.Name, cmds, namespaces, propertyTypes);

        resx.Generate();
        resx.Close();
	}

    //manager.StartNewFile(resxFileName);
    manager.Start(resxFileName);
    manager.Write(File.ReadAllText(resxFileName));
    //manager.EndBlock();
    
    manager.Process();
    int start = projectItem.ContainingProject.FullName.Split('\\').Length;
    var spaces =  t4DirInfo.FullName.Split('\\');
    StringBuilder sb = new StringBuilder();
    for (int i = start; i < spaces.Length; ++i) 
    {
        sb.Append(spaces[i]);
        if (i + 1 < spaces.Length) sb.Append(".");
    }

    SetAndRunResXFileCodeGenerator(t4DirInfo, resxFileName, projectItem.ContainingProject.Name);
}

private void SetAndRunResXFileCodeGenerator(DirectoryInfo t4DirInfo, string fileName, string nameSpace = "")
{
    var hostServiceProvider = (IServiceProvider) Host;
    var dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    var projectItem = dte.Solution.FindProjectItem(fileName);
    projectItem.Properties.Item("CustomTool").Value = "PublicResXFileCodeGenerator";
    projectItem.Properties.Item("CustomToolNamespace").Value = nameSpace;
    ((VSProjectItem)projectItem.Object).RunCustomTool();
}
#>