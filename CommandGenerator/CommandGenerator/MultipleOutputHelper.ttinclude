<#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Text"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"
#><#+
class Manager 
{
    
    private class FileBlock
    {
        internal StringBuilder file = new StringBuilder();
        internal String name;

        public FileBlock(String name)
        {
            this.name = name;
        }
    }

    private List<FileBlock> _fileBlocks = new List<FileBlock>();
    private EnvDTE.DTE dte;
    private EnvDTE.ProjectItem templateProjectItem;
    private String outputPath;
    private Action<IEnumerable<String>> projectSyncAction;
    private int _indent = 0;
    private bool _isNewLine = true;


    internal Manager(ITextTemplatingEngineHost host) 
    {
        var hostServiceProvider = (IServiceProvider) host;
        if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
        dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new ArgumentNullException("Could not obtain DTE from host");
        templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
        outputPath = Path.GetDirectoryName(host.TemplateFile);
        projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
    }

    public void PushIndent() 
    {
        ++_indent;
    }

    public void RemoveIndent() 
    {
        --_indent;
    }

    public void Start(String filename) 
    {
        _fileBlocks.Add(new FileBlock(filename));
    }

    public void Write(params string[] text)
    {
        if (_isNewLine)
        {
            for (int i = 0; i < _indent; ++i)
                _fileBlocks[_fileBlocks.Count - 1].file.Append("\t");

            _isNewLine = false;
        }

        foreach (string s in text)
            _fileBlocks[_fileBlocks.Count - 1].file.Append(s);
    }

    public void Write(string text)
    {
        if (_isNewLine)
        {
            for (int i = 0; i < _indent; ++i)
                _fileBlocks[_fileBlocks.Count - 1].file.Append("\t");

            _isNewLine = false;
        }

        _fileBlocks[_fileBlocks.Count - 1].file.Append(text);
    }

    public void WriteLine()
    {
        _fileBlocks[_fileBlocks.Count - 1].file.AppendLine("");
        _isNewLine = true;
    }

    public void WriteLine(params string[] text)
    {
        if (_isNewLine)
        {
            for (int i = 0; i < _indent; ++i)
                _fileBlocks[_fileBlocks.Count - 1].file.Append("\t");
        }

        foreach (string s in text)
            _fileBlocks[_fileBlocks.Count - 1].file.Append(s);

        _fileBlocks[_fileBlocks.Count - 1].file.AppendLine("");
        _isNewLine = true;
    }

    public void WriteLine(string text)
    {
        if (_isNewLine)
        {
            for (int i = 0; i < _indent; ++i)
                _fileBlocks[_fileBlocks.Count - 1].file.Append("\t");
        }

        _fileBlocks[_fileBlocks.Count - 1].file.AppendLine(text);
        _isNewLine = true;
    }

    private bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
        {
            CheckoutFileIfRequired(fileName);
            File.WriteAllText(fileName, content);
            //AddToSourceControlIfRequired(fileName);
        }
    }

    public void Process()
    {
        List<String> generatedFileNames = new List<String>();
        foreach (FileBlock fb in _fileBlocks)
        {
            var fileName = Path.Combine(outputPath, fb.name);
            CreateFile(fileName, fb.file.ToString());
            generatedFileNames.Add(fileName);
        }

        projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        templateProjectItem.ContainingProject.Save();
    }

    private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames)
    {
        var keepFileNameSet = new HashSet<String>(keepFileNames);
        var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.Name) + ".";
        var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
        foreach (EnvDTE.ProjectItem item in templateProjectItem.ProjectItems) 
        {
            // Get current items under the template
            projectFiles.Add(item.get_FileNames(0), item);
        }

        // Remove unused items
        foreach (var pair in projectFiles)
        {
            if (!keepFileNameSet.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                pair.Value.Delete();
        }

        // Add missing files
        foreach (String filename in keepFileNameSet) 
        {
            if (!projectFiles.ContainsKey(filename)) 
            {
                templateProjectItem.ProjectItems.AddFromFile(filename);
            }
        }
    }

    private void CheckoutFileIfRequired(String fileName) 
    {
        var sc = dte.SourceControl;
        if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
            sc.CheckOutItem(fileName);
    }

    private void AddToSourceControlIfRequired(String fileName) 
    {
        var sc = dte.SourceControl;
        if (sc != null && !sc.IsItemUnderSCC(fileName))
            dte.ExecuteCommand("Team.Git.AddToSourceControl", fileName);
    }

}#>
