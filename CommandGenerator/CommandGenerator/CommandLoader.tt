<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Design" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="VSLangProj" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Resources.Tools" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="CommandSchema.ttinclude" #>
<#@ include file="CommandReader.ttinclude" #>
<#@ include file="MultipleOutputHelper.ttinclude" #>
<#@ output extension=".txt" #> 
<#
var serviceProvider = this.Host as IServiceProvider;
var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
string projectDir = Host.ResolveAssemblyReference("$(ProjectDir)");
XmlDocument doc = new XmlDocument();
// Load prototype.xml
doc.Load(Path.Combine(projectDir, @"./Commands.xml"));

List<CustomCommand> cmds = Read(doc);

var manager = Manager.Create(Host, GenerationEnvironment);
var t4DirInfo = new FileInfo(Host.TemplateFile).Directory;

Generate(cmds, manager, t4DirInfo);
manager.Process(true);

#><#+
private void Generate(List<CustomCommand> cmds, Manager manager, DirectoryInfo t4DirInfo) 
{
    var hostServiceProvider = (IServiceProvider) Host;
    var dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    var projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    string resxFileName = Path.Combine(t4DirInfo.FullName, "CommandResources.resx");
    using (ResXResourceWriter resx = new ResXResourceWriter(resxFileName)) 
    {
	    foreach (CustomCommand cmd in cmds) 
	    {
		    manager.StartNewFile(cmd.name + ".cs");
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("namespace " + projectItem.ContainingProject.Name);
            sb.AppendLine("{\n");
            sb.Append("\tpublic class ");
		    if (cmd.isComposite)
                sb.AppendLine(cmd.name);
            else
                sb.AppendLine(cmd.name);

            sb.Append("\t{");
            sb.AppendLine("");
            string displayName = cmd.name + "Name";
            sb.AppendLine("\t\tpublic string DisplayName => CommandResources." + displayName + ";");
            resx.AddResource(displayName, cmd.displayName);

            foreach (CustomProperty prop in cmd.properties)
            {
                sb.Append("\t\tpublic virtual ");
                sb.Append(prop.type);
                sb.Append(" ");
                sb.Append(prop.name);
                sb.Append(" { get; set; }");
                sb.AppendLine("// Mapping " + prop.mapping ?? "Not mapped to db");
            }

            sb.AppendLine("\n");

            // Default protected constructor
            sb.Append("\t\tprotected ");
            sb.Append(cmd.name);
            sb.AppendLine("() {}");

            // Public constructor
            sb.Append("\t\tpublic ");
            sb.Append(cmd.name);
            sb.AppendLine("(string test) {}");

            sb.AppendLine("\t}\n");
            sb.Append("}");
            Write(sb.ToString());
		    manager.EndBlock();
        }

        resx.Generate();
        resx.Close();
	}

    manager.StartNewFile(resxFileName);
    Write(File.ReadAllText(resxFileName));
    manager.EndBlock();

    SetAndRunResXFileCodeGenerator(t4DirInfo, resxFileName);
}

private void SetAndRunResXFileCodeGenerator(DirectoryInfo t4DirInfo, string fileName, string nameSpace = "")
{
    var hostServiceProvider = (IServiceProvider) Host;
    var dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    var projectItem = dte.Solution.FindProjectItem(fileName);
    projectItem.Properties.Item("CustomTool").Value = "PublicResXFileCodeGenerator";
    projectItem.Properties.Item("CustomToolNamespace").Value = nameSpace;
    ((VSProjectItem)projectItem.Object).RunCustomTool();
}
#>