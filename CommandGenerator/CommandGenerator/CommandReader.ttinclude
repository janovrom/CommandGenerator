<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #><#+
CustomCommand GetCommand(XmlNode node, string parentName, string parentNamespace)
{
    CustomCommand cmd = new CustomCommand();
    cmd.parentName = parentName;
    cmd.parentNamespace = parentNamespace;
    cmd.name = node.Name;

    bool namespaceFound = false;
    foreach (XmlAttribute attribute in node.Attributes)
    {
        if (attribute.Name.ToLowerInvariant().Equals("name"))
        {
            cmd.displayName = attribute.Value;
        }
        else if (attribute.Name.ToLowerInvariant().Equals("namespace")) 
        {
            cmd.cmdNamespace = attribute.Value;
            namespaceFound = true;
        }
        else if (attribute.Name.ToLowerInvariant().Equals("persist") || attribute.Name.ToLowerInvariant().Equals("persistable"))
        {
            cmd.isPersistable = true;
        }
    }

    if (!namespaceFound)
        cmd.cmdNamespace = parentNamespace;

    foreach (XmlNode property in node.ChildNodes)
    {
        var prop = new CustomProperty();
        prop.name = property.Name;

        foreach (XmlAttribute attribute in property.Attributes)
        {
            if (attribute.Name.ToLowerInvariant().Equals("type"))
                prop.type = attribute.Value;
            else if (attribute.Name.ToLowerInvariant().Equals("map"))
                prop.mapping = attribute.Value;
            else if (attribute.Name.ToLowerInvariant().Equals("nullable"))
                prop.canBeNull = bool.Parse(attribute.Value);
        }

        cmd.properties.Add(prop);
    }

    return cmd;
}

List<CustomCommand> Read(XmlDocument doc)
{
    XmlNode schema = doc.SelectSingleNode("CommandSchema");
    List<CustomCommand> cmds = new List<CustomCommand>();
    foreach (XmlNode node in schema.ChildNodes)
    {
        string nodeNamespace = node.Attributes["namespace"]?.Value;
        string nodeName = node.Name;
        foreach (XmlNode cmd in node.ChildNodes)
            cmds.Add(GetCommand(cmd, nodeName, nodeNamespace));
    }

    return cmds;
}

#>