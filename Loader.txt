using System;
using System.Collections.Generic;
using System.Linq;
using Creator.Modules.Scene3DDesigner.Core.Animations.Commands;
using Creator.Modules.Scene3DDesigner.Core.Animations.Entities;
using Creator.Modules.Scene3DDesigner.Core.Entities.SceneGraph;
using Creator.Modules.Scene3DDesigner.Core.Entities.SceneGraph.Original;
using Creator.Modules.Scene3DDesigner.Core.Entities.SceneGraph.SceneObjects;
using Creator.Modules.Scene3DDesigner.Core.Repositories;
using Creator.Modules.Scene3DDesigner.Core.Services.Commands;
using Misterine.Viper.Creator.Shared.Bases.Commands;
using NHibernate;

namespace Creator.Modules.Scene3DDesigner.Core.Services
{
    using RedoableCommandBase = RedoableCommandBase<Scene3D, Scene3DSessionManager, IStatelessSession, ISceneDataService>;
    using CompositeCommandBase = CompositeCommandBase<Scene3D, Scene3DSessionManager, IStatelessSession, ISceneDataService>;

    public class Scene3DLoader
    {
        private readonly Scene3DSessionManager _Scene3DSessionManager;
        private IStatelessSession _Session => _Scene3DSessionManager.GetStatelessSession();

        private readonly Dictionary<int, ObjectColor> _objectColors = new Dictionary<int, ObjectColor>();
        private readonly Dictionary<int, ObjectMaterial> _objectMaterials = new Dictionary<int, ObjectMaterial>();
        private readonly Dictionary<int, MaterialUsage> _materialUsages = new Dictionary<int, MaterialUsage>();
        private readonly Dictionary<int, Fiducial> _fiducials = new Dictionary<int, Fiducial>();
        private readonly Dictionary<int, Label> _labels = new Dictionary<int, Label>();
        private readonly Dictionary<int, NodeObject> _nodeObjects = new Dictionary<int, NodeObject>();
        private readonly Dictionary<int, SceneObject> _sceneObjects = new Dictionary<int, SceneObject>();
        private readonly Dictionary<int, RedoableCommandBase> _commands = new Dictionary<int, RedoableCommandBase>();
        private readonly Dictionary<int, CompositeCommandBase> _compositeCommands = new Dictionary<int, CompositeCommandBase>();
        private readonly Dictionary<int, Model> _models = new Dictionary<int, Model>();
        private readonly Dictionary<int, ColorRGBA> _colors = new Dictionary<int, ColorRGBA>();
        private readonly Dictionary<int, Material> _materials = new Dictionary<int, Material>();
        private readonly Dictionary<int, Transform> _transforms = new Dictionary<int, Transform>();
        private readonly Dictionary<int, GeometryLod> _geometryLods = new Dictionary<int, GeometryLod>();
        private readonly Dictionary<int, Geometry> _geometries = new Dictionary<int, Geometry>();
        private readonly Dictionary<int, PropertyKey> _propertyKeys = new Dictionary<int, PropertyKey>();
        private readonly Dictionary<int, PropertyBase> _properties = new Dictionary<int, PropertyBase>();
        private readonly Dictionary<int, ProductInfo> _productInfo = new Dictionary<int, ProductInfo>();
        private readonly Dictionary<int, Assembly> _assemblies = new Dictionary<int, Assembly>();
        private readonly Dictionary<int, Node> _nodes = new Dictionary<int, Node>();
        private readonly Dictionary<int, CadModel> _cadModels = new Dictionary<int, CadModel>();

        public Scene3DLoader(Scene3DSessionManager scene3DSessionManager)
        {
            _Scene3DSessionManager = scene3DSessionManager;
        }

        public void LoadScene(Scene3D scene)
        {
            LoadSceneInternal(scene);
            Clear();
        }

        private void LoadSceneInternal(Scene3D scene)
        {
            // Load from database
            var models = _Session.QueryOver<Model>().Where(x => x.Scene3D.Id == scene.Id).List();
            var objectColors = _Session.QueryOver<ObjectColor>().Where(x => x.Scene3D.Id == scene.Id).List();
            var objectMaterials = _Session.QueryOver<ObjectMaterial>().Where(x => x.Scene3D.Id == scene.Id).List();
            var materialUsages = _Session.QueryOver<MaterialUsage>().Where(x => x.Scene3D.Id == scene.Id).List();
            var fiducials = _Session.QueryOver<Fiducial>().Where(x => x.Scene3D.Id == scene.Id).List();
            var labels = _Session.QueryOver<Label>().Where(x => x.Scene3D.Id == scene.Id).List();
            var nodeObjects = _Session.QueryOver<NodeObject>().Where(x => x.Scene3D.Id == scene.Id).List();
            var sceneObjects = _Session.QueryOver<SceneObject>().Where(x => x.Scene3D.Id == scene.Id).List();
            var commands = _Session.QueryOver<RedoableCommandBase>().Where(x => x.Entity.Id == scene.Id).List();
            var compositeCommands = _Session.QueryOver<CompositeCommandBase>().Where(x => x.Entity.Id == scene.Id).List();
            var translateCommands = _Session.QueryOver<TranslationCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var rotateCommands = _Session.QueryOver<RotateCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var scaleCommands = _Session.QueryOver<ScaleCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var addObjectCommands = _Session.QueryOver<AddObjectCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var deleteObjectCommands = _Session.QueryOver<DeleteObjectCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var changeImportScaleCommands = _Session.QueryOver<ChangeImportScaleCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setLayerCommands = _Session.QueryOver<SetLayerCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setFiducialCodeIdCommands = _Session.QueryOver<SetFiducialCodeIdCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setFiducialSizeCommands = _Session.QueryOver<SetFiducialSizeCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setLabelBgColorCommands = _Session.QueryOver<SetLabelBgColorCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setLabelTextColorCommands = _Session.QueryOver<SetLabelTextColorCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setLabelFontSizeCommands = _Session.QueryOver<SetLabelFontSizeCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setLabelLineWidthCommands = _Session.QueryOver<SetLabelLineWidthCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setLabelStartPositionCommands = _Session.QueryOver<SetLabelStartPositionCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setLabelTextCommands = _Session.QueryOver<SetLabelTextCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setFiducialFormatCommands = _Session.QueryOver<SetFiducialFormatCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setLodCommands = _Session.QueryOver<SetLodCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setNameCommands = _Session.QueryOver<SetNameCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setShaderTypeCommands = _Session.QueryOver<SetShaderTypeCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setMaterialColorCommands = _Session.QueryOver<SetMaterialColorCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var createMaterialCommands = _Session.QueryOver<CreateMaterialCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var deleteMaterialCommands = _Session.QueryOver<DeleteMaterialCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var assignMaterialCommands = _Session.QueryOver<AssignMaterialCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var unAssignMaterialCommands = _Session.QueryOver<UnAssignMaterialCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setVisibilityCommands = _Session.QueryOver<SetVisibilityCommand>().Where(x => x.Entity.Id == scene.Id).List();

            // Load models

            foreach (var model in models)
                _models.Add(model.Id, model);

            LoadModels();

            // Fill dictionaries

            foreach (var objectColor in objectColors)
                _objectColors.Add(objectColor.Id, objectColor);

            foreach (var objectMaterial in objectMaterials)
                _objectMaterials.Add(objectMaterial.Id, objectMaterial);

            foreach (var materialUsage in materialUsages)
                _materialUsages.Add(materialUsage.Id, materialUsage);

            foreach (var fiducial in fiducials)
                _fiducials.Add(fiducial.Id, fiducial);

            foreach (var label in labels)
                _labels.Add(label.Id, label);

            foreach (var nodeObject in nodeObjects)
                _nodeObjects.Add(nodeObject.Id, nodeObject);

            foreach (var sceneObject in sceneObjects)
                _sceneObjects.Add(sceneObject.Id, sceneObject);

            foreach (var command in commands)
                _commands.Add(command.Id, command);

            foreach (var compositeCommand in compositeCommands)
                _compositeCommands.Add(compositeCommand.Id, compositeCommand);

            // Set references
            ConstructModels(scene, models);
            ConstructObjectColors(scene, objectColors);

            ConstructFiducials(fiducials);
            ConstructNodeObjects(nodeObjects);
            ConstructLabels(labels);
            ConstructSceneObjects(scene);

            ConstructObjectMaterials(scene, objectMaterials);
            ConstructMaterialUsages(scene, materialUsages);

            ConstructTranslateCommands(translateCommands);
            ConstructRotateCommands(rotateCommands);
            ConstructScaleCommands(scaleCommands);
            ConstructAddObjectCommands(addObjectCommands);
            ConstructDeleteObjectCommands(deleteObjectCommands);
            ConstructChangeImportScaleCommands(changeImportScaleCommands);
            ConstructSetLayerCommands(setLayerCommands);
            ConstructSetFiducialCodeIdCommands(setFiducialCodeIdCommands);
            ConstructSetFiducialSizeCommands(setFiducialSizeCommands);
            ConstructSetLabelBgColorCommands(setLabelBgColorCommands);
            ConstructSetLabelTextColorCommands(setLabelTextColorCommands);
            ConstructSetLabelFontSizeCommands(setLabelFontSizeCommands);
            ConstructSetLabelLineWidthCommands(setLabelLineWidthCommands);
            ConstructSetLabelStartPositionCommands(setLabelStartPositionCommands);
            ConstructSetLabelTextCommands(setLabelTextCommands);
            ConstructSetFiducialFormatCommands(setFiducialFormatCommands);
            ConstructSetLodCommands(setLodCommands);
            ConstructSetNameCommands(setNameCommands);
            ConstructSetShaderTypeCommands(setShaderTypeCommands);
            ConstructSetMaterialColorCommands(setMaterialColorCommands);
            ConstructCreateMaterialCommands(createMaterialCommands);
            ConstructDeleteMaterialCommands(deleteMaterialCommands);
            ConstructAssignMaterialCommands(assignMaterialCommands);
            ConstructUnAssignMaterialCommands(unAssignMaterialCommands);
            ConstructSetVisibilityCommands(setVisibilityCommands);

            // Animations
            var keyframes = _Session.QueryOver<Keyframe>().Where(x => x.Scene.Id == scene.Id).OrderBy(x => x.Frame).Asc.List();
            var curves = _Session.QueryOver<Curve>().Where(x => x.Scene.Id == scene.Id).List();
            var properties = _Session.QueryOver<AnimatedProperty>().Where(x => x.Scene.Id == scene.Id).List();
            var triChannelProperties = _Session.QueryOver<TriChannelProperty>().Where(x => x.Scene.Id == scene.Id).List();
            var quadChannelProperties = _Session.QueryOver<QuadChannelProperty>().Where(x => x.Scene.Id == scene.Id).List();
            var clips = _Session.QueryOver<Clip>().Where(x => x.Scene.Id == scene.Id).List();
            var tracks = _Session.QueryOver<Track>().Where(x => x.Scene.Id == scene.Id).List();
            var anims = _Session.QueryOver<Animation>().Where(x => x.Scene.Id == scene.Id).List();
            // Animation command
            var addAnimCmd = _Session.QueryOver<AddAnimationCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var addClipCmd = _Session.QueryOver<AddClipCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var addKeyCmd = _Session.QueryOver<AddKeyframeCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var addTrackCmd = _Session.QueryOver<AddTrackCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var animPropCmd = _Session.QueryOver<AnimatePropertyCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var delTrackCmd = _Session.QueryOver<DeleteTrackCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var delClipCmd = _Session.QueryOver<DeleteClipCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var delKeyCmd = _Session.QueryOver<DeleteKeyframeCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var delAnimCmd = _Session.QueryOver<DeleteAnimationCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var moveClipCmd = _Session.QueryOver<MoveClipCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var clipToTrackCmd = _Session.QueryOver<MoveClipToTrackCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setKeyCmd = _Session.QueryOver<SetKeyframeCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var setTrackIdCmd = _Session.QueryOver<SetTrackIdCommand>().Where(x => x.Entity.Id == scene.Id).List();
            var syncPropCmd = _Session.QueryOver<SynchronizePropertyCommand>().Where(x => x.Entity.Id == scene.Id).List();

            // Construct animation globals
            var tri = triChannelProperties.ToDictionary<TriChannelProperty, int>(x => x.Id);
            var quad = quadChannelProperties.ToDictionary<QuadChannelProperty, int>(x => x.Id);
            var idToCurve = curves.ToDictionary<Curve, int>(curve => curve.Id);
            var idToProp = properties.ToDictionary<AnimatedProperty, int>(x => x.Id);
            var idToAnim = anims.ToDictionary<Animation, int>(anim => anim.Id);
            var idToTrack = tracks.ToDictionary<Track, int>(track => track.Id);
            var idToClip = clips.ToDictionary<Clip, int>(clip => clip.Id);
            var idToKey = keyframes.ToDictionary<Keyframe, int>(keyframe => keyframe.Id);

            // Construct animations
            ConstructAnimatedProperties(idToCurve, triChannelProperties, quadChannelProperties, scene);
            ConstructTracks(clips, idToTrack);
            ConstructCurves(curves, keyframes, scene, idToCurve);
            ConstructClips(clips, tri, quad, scene);
            ConstructAnimations(anims, tracks, scene, idToAnim);
            AddAnimationToSceneObject(anims, _sceneObjects, scene);

            // Construct animation commands
            foreach (var cmd in addAnimCmd) { cmd.Animation = idToAnim[cmd.Animation.Id]; cmd.SceneObject = _sceneObjects[cmd.SceneObject.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in addClipCmd) { cmd.Clip = idToClip[cmd.Clip.Id]; cmd.Track = idToTrack[cmd.Track.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in addKeyCmd) { cmd.Keyframe = idToKey[cmd.Keyframe.Id]; cmd.Curve = idToCurve[cmd.Curve.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in addTrackCmd) { cmd.Track = idToTrack[cmd.Track.Id]; cmd.Animation = idToAnim[cmd.Animation.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in animPropCmd) { cmd.AnimatedProperty = idToProp[cmd.AnimatedProperty.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in delTrackCmd) { cmd.Track = idToTrack[cmd.Track.Id]; cmd.Animation = idToAnim[cmd.Animation.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in delClipCmd) { cmd.Track = idToTrack[cmd.Track.Id]; cmd.Clip = idToClip[cmd.Clip.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in delKeyCmd) { cmd.Curve = idToCurve[cmd.Curve.Id]; cmd.Keyframe = idToKey[cmd.Keyframe.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in delAnimCmd) { cmd.SceneObject = _sceneObjects[cmd.SceneObject.Id]; cmd.Animation = idToAnim[cmd.Animation.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in moveClipCmd) { cmd.Clip = idToClip[cmd.Clip.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in clipToTrackCmd) { cmd.Clip = idToClip[cmd.Clip.Id]; cmd.OldTrack = idToTrack[cmd.OldTrack.Id]; cmd.NewTrack = idToTrack[cmd.NewTrack.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in setKeyCmd) { cmd.Keyframe = idToKey[cmd.Keyframe.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in setTrackIdCmd) { cmd.Track = idToTrack[cmd.Track.Id]; _commands[cmd.Id] = cmd; }
            foreach (var cmd in syncPropCmd) { cmd.AnimatedProperty = idToProp[cmd.AnimatedProperty.Id]; _commands[cmd.Id] = cmd; }

            ConstructCompositeCommands(compositeCommands);
            ConstructCommands(scene);

            scene.Root = _sceneObjects[scene.Root.Id];
        }

        private void ConstructClips(IList<Clip> clips, Dictionary<int, TriChannelProperty> tri, Dictionary<int, QuadChannelProperty> quad, Scene3D scene)
        {
            foreach (var clip in clips)
            {
                clip.AnimatedPosition = tri[clip.AnimatedPosition.Id];
                clip.AnimatedRotation = tri[clip.AnimatedRotation.Id];
                clip.AnimatedScale = tri[clip.AnimatedScale.Id];
                clip.AnimatedColor = quad[clip.AnimatedColor.Id];
                clip.Scene = scene;
            }
        }

        private void ConstructAnimatedProperties(Dictionary<int, Curve> idToCurve, IList<TriChannelProperty> triChannelProperties, IList<QuadChannelProperty> quadChannelProperties, Scene3D scene)
        {
            foreach (var prop in triChannelProperties)
            {
                prop.X = idToCurve[prop.X.Id];
                prop.Y = idToCurve[prop.Y.Id];
                prop.Z = idToCurve[prop.Z.Id];
                prop.X.Scene = scene;
                prop.Y.Scene = scene;
                prop.Z.Scene = scene;
            }

            foreach (var prop in quadChannelProperties)
            {
                prop.X = idToCurve[prop.X.Id];
                prop.Y = idToCurve[prop.Y.Id];
                prop.Z = idToCurve[prop.Z.Id];
                prop.W = idToCurve[prop.W.Id];

                prop.X.Scene = scene;
                prop.Y.Scene = scene;
                prop.Z.Scene = scene;
                prop.W.Scene = scene;
            }
        }

        private void AddAnimationToSceneObject(IList<Animation> anims, Dictionary<int, SceneObject> sceneObjects, Scene3D scene)
        {
            foreach (var anim in anims)
            {
                if (anim.SceneObject !=null)
                {
                    anim.SceneObject = sceneObjects[anim.SceneObject.Id];
                    anim.SceneObject.Animation = anim;
                }
            }
        }

        private void ConstructAnimations(IList<Animation> animations, IList<Track> tracks, Scene3D scene, Dictionary<int, Animation> idToAnim)
        {
            foreach (var track in tracks)
            {
                if (track.Animation != null)
                {
                    track.Animation = idToAnim[track.Animation.Id];
                    track.Animation.Tracks.Add(track);
                }
                track.Scene = scene;
            }

            foreach (var anim in animations)
            {
                anim.Scene = scene;
                anim.Tracks = anim.Tracks.OrderBy(track => track.TrackId).ToList();
            }
        }

        private void ConstructTracks(IList<Clip> clips, Dictionary<int, Track> idToTrack)
        {
            foreach (var clip in clips)
            {
                if (clip.Track != null)
                {
                    clip.Track = idToTrack[clip.Track.Id];
                    clip.Track.Clips.Add(clip);
                }
            }
        }

        private void ConstructCurves(IList<Curve> curves, IList<Keyframe> keyframes, Scene3D scene, Dictionary<int, Curve> idToCurve)
        {
            foreach (var keyframe in keyframes)
            {
                if (keyframe.Curve != null)
                {
                    keyframe.Curve = idToCurve[keyframe.Curve.Id];
                    keyframe.Curve.Keyframes.Add(keyframe);
                }
                keyframe.Scene = scene;
            }

            foreach (var curve in curves)
            {
                curve.Scene = scene;
                curve.SortKeyframes();
            }
        }

        private void ConstructUnAssignMaterialCommands(IList<UnAssignMaterialCommand> unAssignMaterialCommands)
        {
            foreach (var unAssignMaterialCommand in unAssignMaterialCommands)
            {
                unAssignMaterialCommand.MaterialUsage = _materialUsages[unAssignMaterialCommand.MaterialUsage.Id];
                _commands[unAssignMaterialCommand.Id] = unAssignMaterialCommand;
            }
        }

        private void ConstructAssignMaterialCommands(IList<AssignMaterialCommand> assignMaterialCommands)
        {
            foreach (var asignMaterialCommand in assignMaterialCommands)
            {
                asignMaterialCommand.MaterialUsage = _materialUsages[asignMaterialCommand.MaterialUsage.Id];
                _commands[asignMaterialCommand.Id] = asignMaterialCommand;
            }
        }

        private void ConstructDeleteMaterialCommands(IList<DeleteMaterialCommand> deleteMaterialCommands)
        {
            foreach (var deleteMaterialCommand in deleteMaterialCommands)
            {
                deleteMaterialCommand.Material = _objectMaterials[deleteMaterialCommand.Material.Id];
                _commands[deleteMaterialCommand.Id] = deleteMaterialCommand;
            }
        }

        private void ConstructCreateMaterialCommands(IList<CreateMaterialCommand> createMaterialCommands)
        {
            foreach (var createMaterialCommand in createMaterialCommands)
            {
                createMaterialCommand.Material = _objectMaterials[createMaterialCommand.Material.Id];
                _commands[createMaterialCommand.Id] = createMaterialCommand;
            }
        }

        private void ConstructCompositeCommands(IList<CompositeCommandBase> compositeCommands)
        {
            foreach (var compositeCommand in compositeCommands)
                _commands[compositeCommand.Id] = compositeCommand;
        }

        private void ConstructSetVisibilityCommands(IList<SetVisibilityCommand> setVisibilityCommands)
        {
            foreach (var setVisibilityCommand in setVisibilityCommands)
            {
                setVisibilityCommand.SceneObject = _sceneObjects[setVisibilityCommand.SceneObject.Id];
                _commands[setVisibilityCommand.Id] = setVisibilityCommand;
            }
        }

        private void ConstructSetShaderTypeCommands(IList<SetShaderTypeCommand> setShaderTypeCommands)
        {
            foreach (var setShaderTypeCommand in setShaderTypeCommands)
            {
                setShaderTypeCommand.Material = _objectMaterials[setShaderTypeCommand.Material.Id];
                _commands[setShaderTypeCommand.Id] = setShaderTypeCommand;
            }
        }

        private void ConstructSetMaterialColorCommands(IList<SetMaterialColorCommand> setMaterialColorCommands)
        {
            foreach (var setMaterialColorCommand in setMaterialColorCommands)
            {
                setMaterialColorCommand.Material = _objectMaterials[setMaterialColorCommand.Material.Id];
                setMaterialColorCommand.NewColor = _objectColors[setMaterialColorCommand.NewColor.Id];
                setMaterialColorCommand.OldColor = _objectColors[setMaterialColorCommand.OldColor.Id];
                _commands[setMaterialColorCommand.Id] = setMaterialColorCommand;
            }
        }

        private void ConstructSetNameCommands(IList<SetNameCommand> setNameCommands)
        {
            foreach (var setNameCommand in setNameCommands)
            {
                setNameCommand.SceneObject = _sceneObjects[setNameCommand.SceneObject.Id];
                _commands[setNameCommand.Id] = setNameCommand;
            }
        }

        private void ConstructSetLodCommands(IList<SetLodCommand> setLodCommands)
        {
            foreach (var setLodCommand in setLodCommands)
            {
                setLodCommand.SceneObject = _sceneObjects[setLodCommand.SceneObject.Id];
                _commands[setLodCommand.Id] = setLodCommand;
            }
        }

        private void ConstructSetFiducialFormatCommands(IList<SetFiducialFormatCommand> setFiducialFormatCommands)
        {
            foreach (var setFiducialFormatCommand in setFiducialFormatCommands)
            {
                setFiducialFormatCommand.Fiducial = _fiducials[setFiducialFormatCommand.Fiducial.Id];
                _commands[setFiducialFormatCommand.Id] = setFiducialFormatCommand;
            }
        }

        private void ConstructSetLabelTextCommands(IList<SetLabelTextCommand> setLabelTextCommands)
        {
            foreach (var setLabelTextCommand in setLabelTextCommands)
            {
                setLabelTextCommand.Label = _labels[setLabelTextCommand.Label.Id];
                _commands[setLabelTextCommand.Id] = setLabelTextCommand;
            }
        }

        private void ConstructSetLabelStartPositionCommands(IList<SetLabelStartPositionCommand> setLabelStartPositionCommands)
        {
            foreach (var setLabelStartPositionCommand in setLabelStartPositionCommands)
            {
                setLabelStartPositionCommand.Label = _labels[setLabelStartPositionCommand.Label.Id];
                _commands[setLabelStartPositionCommand.Id] = setLabelStartPositionCommand;
            }
        }


        private void ConstructSetLabelLineWidthCommands(IList<SetLabelLineWidthCommand> setLabelLineWidthCommands)
        {
            foreach (var setLabelLineWidthCommand in setLabelLineWidthCommands)
            {
                setLabelLineWidthCommand.Label = _labels[setLabelLineWidthCommand.Label.Id];
                _commands[setLabelLineWidthCommand.Id] = setLabelLineWidthCommand;
            }
        }

        private void ConstructSetLabelFontSizeCommands(IList<SetLabelFontSizeCommand> setLabelFontSizeCommands)
        {
            foreach (var setLabelBgColorCommand in setLabelFontSizeCommands)
            {
                setLabelBgColorCommand.Label = _labels[setLabelBgColorCommand.Label.Id];
                _commands[setLabelBgColorCommand.Id] = setLabelBgColorCommand;
            }
        }

        private void ConstructSetLabelTextColorCommands(IList<SetLabelTextColorCommand> setLabelTextColorCommands)
        {
            foreach (var setLabelTextColorCommand in setLabelTextColorCommands)
            {
                setLabelTextColorCommand.Label = _labels[setLabelTextColorCommand.Label.Id];
                setLabelTextColorCommand.OldTextColor = _objectColors[setLabelTextColorCommand.OldTextColor.Id];
                setLabelTextColorCommand.NewTextColor = _objectColors[setLabelTextColorCommand.NewTextColor.Id];
                _commands[setLabelTextColorCommand.Id] = setLabelTextColorCommand;
            }
        }

        private void ConstructSetLabelBgColorCommands(IList<SetLabelBgColorCommand> setLabelBgColorCommands)
        {
            foreach (var setLabelBgColorCommand in setLabelBgColorCommands)
            {
                setLabelBgColorCommand.Label = _labels[setLabelBgColorCommand.Label.Id];
                setLabelBgColorCommand.OldBgColor = _objectColors[setLabelBgColorCommand.OldBgColor.Id];
                setLabelBgColorCommand.NewBgColor = _objectColors[setLabelBgColorCommand.NewBgColor.Id];
                _commands[setLabelBgColorCommand.Id] = setLabelBgColorCommand;
            }
        }

        private void ConstructSetFiducialSizeCommands(IList<SetFiducialSizeCommand> setFiducialSizeCommands)
        {
            foreach (var setFiducialSizeCommand in setFiducialSizeCommands)
            {
                setFiducialSizeCommand.Fiducial = _fiducials[setFiducialSizeCommand.Fiducial.Id];
                _commands[setFiducialSizeCommand.Id] = setFiducialSizeCommand;
            }
        }

        private void ConstructSetFiducialCodeIdCommands(IList<SetFiducialCodeIdCommand> setFiducialCodeIdCommands)
        {
            foreach (var setFiducialCodeIdCommand in setFiducialCodeIdCommands)
            {
                setFiducialCodeIdCommand.Fiducial = _fiducials[setFiducialCodeIdCommand.Fiducial.Id];
                _commands[setFiducialCodeIdCommand.Id] = setFiducialCodeIdCommand;
            }
        }

        private void ConstructSetLayerCommands(IList<SetLayerCommand> setLayerCommands)
        {
            foreach (var setLayerCommand in setLayerCommands)
            {
                setLayerCommand.SceneObject = _sceneObjects[setLayerCommand.SceneObject.Id];
                _commands[setLayerCommand.Id] = setLayerCommand;
            }
        }

        private void ConstructChangeImportScaleCommands(IList<ChangeImportScaleCommand> changeImportScaleCommands)
        {
            foreach (var changeImportScaleCommand in changeImportScaleCommands)
            {
                changeImportScaleCommand.Model = _models[changeImportScaleCommand.Model.Id];
                changeImportScaleCommand.RootSceneObject = _sceneObjects[changeImportScaleCommand.RootSceneObject.Id];
                _commands[changeImportScaleCommand.Id] = changeImportScaleCommand;
            }
        }

        private void ConstructDeleteObjectCommands(IList<DeleteObjectCommand> deleteObjectCommands)
        {
            foreach (var deleteObjectCommand in deleteObjectCommands)
            {
                deleteObjectCommand.DeletedObject = _sceneObjects[deleteObjectCommand.DeletedObject.Id];
                deleteObjectCommand.DeletedObjectParent = _sceneObjects[deleteObjectCommand.DeletedObjectParent.Id];
                _commands[deleteObjectCommand.Id] = deleteObjectCommand;
            }
        }

        private void ConstructAddObjectCommands(IList<AddObjectCommand> addObjectCommands)
        {
            foreach (var addObjectCommand in addObjectCommands)
            {
                addObjectCommand.AddedObject = _sceneObjects[addObjectCommand.AddedObject.Id];
                addObjectCommand.AddedObjectParent = _sceneObjects[addObjectCommand.AddedObjectParent.Id];
                _commands[addObjectCommand.Id] = addObjectCommand;
            }
        }

        private void ConstructScaleCommands(IList<ScaleCommand> scaleCommands)
        {
            foreach (var scaleCommand in scaleCommands)
            {
                scaleCommand.SceneObject = _sceneObjects[scaleCommand.SceneObject.Id];
                _commands[scaleCommand.Id] = scaleCommand;
            }
        }

        private void ConstructRotateCommands(IList<RotateCommand> rotateCommands)
        {
            foreach (var rotateCommand in rotateCommands)
            {
                rotateCommand.SceneObject = _sceneObjects[rotateCommand.SceneObject.Id];
                _commands[rotateCommand.Id] = rotateCommand;
            }
        }

        private void ConstructTranslateCommands(IList<TranslationCommand> translateCommands)
        {
            foreach (var translateCommand in translateCommands)
            {
                translateCommand.SceneObject = _sceneObjects[translateCommand.SceneObject.Id];
                _commands[translateCommand.Id] = translateCommand;
            }
        }

        private void ConstructCommands(Scene3D scene)
        {
            foreach (var keyValuePair in _commands)
            {
                var command = keyValuePair.Value;
                command.Entity = scene;

                if (command.Parent != null)
                {
                    command.Parent = _compositeCommands[command.Parent.Id];
                    command.Parent.Commands.Add(command);
                }

                if (command.Index != 0)
                    scene.Commands.Add(command);
            }
        }

        private void ConstructModels(Scene3D scene, IList<Model> models)
        {
            foreach (var model in models)
            {
                model.Scene3D = scene;
                model.CadModel = _cadModels[model.CadModel.Id];
            }
        }

        private void ConstructSceneObjects(Scene3D scene)
        {
            foreach (var keyValuePair in _sceneObjects)
            {
                var sceneObject = keyValuePair.Value;
                if (sceneObject.Parent != null)
                {
                    sceneObject.Parent = _sceneObjects[sceneObject.Parent.Id];
                    sceneObject.Parent.Children.Add(sceneObject);
                }

                sceneObject.Scene3D = scene;
            }
        }

        private void ConstructNodeObjects(IList<NodeObject> nodeObjects)
        {
            foreach (var nodeObject in nodeObjects)
            {
                nodeObject.Model = _models[nodeObject.Model.Id];
                nodeObject.Original = _nodes[nodeObject.Original.Id];
                _sceneObjects[nodeObject.Id] = nodeObject;
            }
        }

        private void ConstructLabels(IList<Label> labels)
        {
            foreach (var label in labels)
            {
                label.BgColor = _objectColors[label.BgColor.Id];
                label.TextColor = _objectColors[label.TextColor.Id];
                label.RelatedObject = _sceneObjects[label.RelatedObject.Id];
                _sceneObjects[label.Id] = label;
            }
        }

        private void ConstructFiducials(IList<Fiducial> fiducials)
        {
            foreach (var fiducial in fiducials)
                _sceneObjects[fiducial.Id] = fiducial;
        }

        private static void ConstructObjectColors(Scene3D scene, IList<ObjectColor> objectColors)
        {
            foreach (var objectColor in objectColors)
                objectColor.Scene3D = scene;
        }

        private void ConstructObjectMaterials(Scene3D scene, IList<ObjectMaterial> objectMaterials)
        {
            foreach (var objectMaterial in objectMaterials)
            {
                objectMaterial.Color = _objectColors[objectMaterial.Color.Id];
                objectMaterial.Scene3D = scene;
            }
        }

        private void ConstructMaterialUsages(Scene3D scene, IList<MaterialUsage> materialUsages)
        {
            foreach (var materialUsage in materialUsages)
            {
                materialUsage.Material = _objectMaterials[materialUsage.Material.Id];
                materialUsage.NodeObject = _nodeObjects[materialUsage.NodeObject.Id];
                materialUsage.Scene3D = scene;

                if (materialUsage.Deleted)
                    continue;

                materialUsage.NodeObject.UsedMaterials.Add(materialUsage);
                materialUsage.Material.Usages.Add(materialUsage);
            }
        }

        private void LoadModels()
        {
            var cadModels = _models.Values.Select(x => x.CadModel);
            foreach (var cadModel in cadModels)
                _cadModels.Add(cadModel.Id, NodeRepository.Get<CadModel>(_Session, cadModel.Id));

            foreach (var cadModel in cadModels)
                LoadModelInternal(_cadModels[cadModel.Id]);
        }

        public void LoadModel(CadModel model)
        {
            LoadModelInternal(model);
            Clear();
        }

        private void LoadModelInternal(CadModel model)
        {
            var colors = _Session.QueryOver<ColorRGBA>().Where(x => x.Model.Id == model.Id).List();
            var materials = _Session.QueryOver<Material>().Where(x => x.Model.Id == model.Id).List();
            var transforms = _Session.QueryOver<Transform>().Where(x => x.Model.Id == model.Id).List();
            var shapes = _Session.QueryOver<Shape>().Where(x => x.Model.Id == model.Id).List();
            var geometryLods = _Session.QueryOver<GeometryLod>().Where(x => x.Model.Id == model.Id).List();
            var geometries = _Session.QueryOver<Geometry>().Where(x => x.Model.Id == model.Id).List();
            var propertyKeys = _Session.QueryOver<PropertyKey>().Where(x => x.Model.Id == model.Id).List();
            var dateTimeProperties = _Session.QueryOver<DateTimeProperty>().Where(x => x.Model.Id == model.Id).List();
            var stringProperties = _Session.QueryOver<StringProperty>().Where(x => x.Model.Id == model.Id).List();
            var intProperties = _Session.QueryOver<IntProperty>().Where(x => x.Model.Id == model.Id).List();
            var floatProperties = _Session.QueryOver<FloatProperty>().Where(x => x.Model.Id == model.Id).List();
            var properties = _Session.QueryOver<PropertyBase>().Where(x => x.Model.Id == model.Id).List();
            var productInfos = _Session.QueryOver<ProductInfo>().Where(x => x.Model.Id == model.Id).List();
            var parts = _Session.QueryOver<Part>().Where(x => x.Model.Id == model.Id).List();
            var assemblies = _Session.QueryOver<Assembly>().Where(x => x.Model.Id == model.Id).List();
            var nodes = _Session.QueryOver<Node>().Where(x => x.Model.Id == model.Id).List();

            foreach (var colorRgba in colors)
                _colors.Add(colorRgba.Id, colorRgba);

            foreach (var material in materials)
                _materials.Add(material.Id, material);

            foreach (var transform in transforms)
                _transforms.Add(transform.Id, transform);

            foreach (var geometryLod in geometryLods)
                _geometryLods.Add(geometryLod.Id, geometryLod);

            foreach (var geometry in geometries)
                _geometries.Add(geometry.Id, geometry);

            foreach (var propertyKey in propertyKeys)
                _propertyKeys.Add(propertyKey.Id, propertyKey);

            foreach (var property in properties)
                _properties.Add(property.Id, property);

            foreach (var productInfo in productInfos)
                _productInfo.Add(productInfo.Id, productInfo);

            foreach (var assembly in assemblies)
                _assemblies.Add(assembly.Id, assembly);

            foreach (var node in nodes)
                _nodes.Add(node.Id, node);

            foreach (var color in colors)
                color.Model = model;

            foreach (var material in materials)
            {
                if (material.AmbientColor != null)
                    material.AmbientColor = _colors[material.AmbientColor.Id];

                if (material.DiffuseColor != null)
                    material.DiffuseColor = _colors[material.DiffuseColor.Id];

                if (material.EmissiveColor != null)
                    material.EmissiveColor = _colors[material.EmissiveColor.Id];

                if (material.SpecularColor != null)
                    material.SpecularColor = _colors[material.SpecularColor.Id];

                material.Model = model;
            }

            foreach (var transform in transforms)
                transform.Model = model;

            foreach (var shape in shapes)
            {
                shape.Lod = _geometryLods[shape.Lod.Id];
                shape.Lod.Shapes.Add(shape);

                if (shape.Material != null)
                    shape.Material = _materials[shape.Material.Id];

                shape.Model = model;
            }

            foreach (var geometryLod in geometryLods)
            {
                geometryLod.ParentGeometry = _geometries[geometryLod.ParentGeometry.Id];
                geometryLod.ParentGeometry.Lods.Add(geometryLod);
                geometryLod.Model = model;
            }

            foreach (var geometry in geometries)
                geometry.Model = model;

            foreach (var propertyKey in propertyKeys)
                propertyKey.Model = model;

            foreach (var stringProperty in stringProperties)
            {
                stringProperty.PropertyKey = _propertyKeys[stringProperty.PropertyKey.Id];
                _properties[stringProperty.Id] = stringProperty;
            }

            foreach (var intProperty in intProperties)
            {
                intProperty.PropertyKey = _propertyKeys[intProperty.PropertyKey.Id];
                _properties[intProperty.Id] = intProperty;
            }

            foreach (var floatProperty in floatProperties)
            {
                floatProperty.PropertyKey = _propertyKeys[floatProperty.PropertyKey.Id];
                _properties[floatProperty.Id] = floatProperty;
            }

            foreach (var dateTimeProperty in dateTimeProperties)
            {
                dateTimeProperty.PropertyKey = _propertyKeys[dateTimeProperty.PropertyKey.Id];
                _properties[dateTimeProperty.Id] = dateTimeProperty;
            }

            foreach (var property2 in properties)
            {
                var property = _properties[property2.Id];
                property.Parent = _productInfo[property.Parent.Id];
                property.Parent.Properties.Add(property);
                property.Model = model;
            }

            foreach (var productInfo in productInfos)
                productInfo.Model = model;

            foreach (var part in parts)
            {
                part.Geometry = _geometries[part.Geometry.Id];
                _nodes[part.Id] = part;
            }

            foreach (var assembly in assemblies)
                _nodes[assembly.Id] = assembly;

            foreach (var node2 in nodes)
            {
                var node = _nodes[node2.Id];
                if (node.Parent != null)
                {
                    node.Parent = _assemblies[node.Parent.Id];
                    node.Parent.Children.Add(node);
                }

                if (node.Transform != null)
                    node.Transform = _transforms[node.Transform.Id];

                node.ProductInfo = _productInfo[node.ProductInfo.Id];
                node.Model = model;
            }

            model.Root = _nodes[model.Root.Id];
        }

        private void Clear()
        {
            _objectColors.Clear();
            _objectMaterials.Clear();
            _materialUsages.Clear();
            _fiducials.Clear();
            _labels.Clear();
            _nodeObjects.Clear();
            _sceneObjects.Clear();
            _commands.Clear();
            _compositeCommands.Clear();
            _models.Clear();
            _colors.Clear();
            _materials.Clear();
            _transforms.Clear();
            _geometryLods.Clear();
            _geometries.Clear();
            _propertyKeys.Clear();
            _properties.Clear();
            _productInfo.Clear();
            _assemblies.Clear();
            _nodes.Clear();
            _cadModels.Clear();
        }
    }
}
